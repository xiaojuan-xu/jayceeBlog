(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{448:function(t,e,a){"use strict";a.r(e);var s=a(2),c=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"执行上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),e("p",[e("strong",[t._v("原文链接："),e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mqyqingfeng/Blog"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" "),e("strong",[t._v("前言")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("在"),e("RouterLink",{attrs:{to:"/JavaScript/javascript3.html"}},[t._v("《JavaScript深入之执行上下文栈》")]),t._v("中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。")],1),t._v(" "),e("p",[t._v("对于每个执行上下文，都有三个重要属性：")]),t._v(" "),e("ul",[e("li",[t._v("变量对象(Variable object，VO)")]),t._v(" "),e("li",[t._v("作用域链(Scope chain)")]),t._v(" "),e("li",[t._v("this")])]),t._v(" "),e("p",[t._v("然后分别在"),e("RouterLink",{attrs:{to:"/JavaScript/javascript4.html"}},[t._v("《JavaScript深入之变量对象》")]),t._v("、"),e("RouterLink",{attrs:{to:"/JavaScript/javascript5.html"}},[t._v("《JavaScript深入之作用域链》")]),t._v("、"),e("RouterLink",{attrs:{to:"/JavaScript/javascript6.html"}},[t._v("《JavaScript深入之从ECMAScript规范解读this》")]),t._v("中讲解了这三个属性。")],1),t._v(" "),e("p",[t._v("阅读本文前，如果对以上的概念不是很清楚，希望先阅读这些文章。")]),t._v(" "),e("p",[t._v("因为，这一篇，我们会结合着所有内容，讲讲执行上下文的具体处理过程。")]),t._v(" "),e("h3",{attrs:{id:"思考题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思考题"}},[t._v("#")]),t._v(" "),e("strong",[t._v("思考题")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("在"),e("RouterLink",{attrs:{to:"/JavaScript/javascript2.html"}},[t._v("《JavaScript深入之词法作用域和动态作用域》")]),t._v("中，提出这样一道思考题：")],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var scope = "global scope";\nfunction checkscope(){\n    var scope = "local scope";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var scope = "global scope";\nfunction checkscope(){\n    var scope = "local scope";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n')])])]),e("p",[t._v("两段代码都会打印'local scope'。虽然两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？")]),t._v(" "),e("p",[t._v("紧接着就在下一篇"),e("RouterLink",{attrs:{to:"/JavaScript/javascript3.html"}},[t._v("《JavaScript深入之执行上下文栈》")]),t._v("中，讲到了两者的区别在于执行上下文栈的变化不一样，然而，如果是这样笼统的回答，依然显得不够详细，本篇就会详细的解析执行上下文栈和执行上下文的具体变化过程。")],1),t._v(" "),e("h3",{attrs:{id:"具体执行分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具体执行分析"}},[t._v("#")]),t._v(" "),e("strong",[t._v("具体执行分析")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("我们分析第一段代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var scope = "global scope";\nfunction checkscope(){\n    var scope = "local scope";\n    function f(){\n        return scope;\n    }\n    return f();\n}\ncheckscope();\n')])])]),e("p",[t._v("执行过程如下：")]),t._v(" "),e("p",[t._v("1.执行全局代码，创建全局执行上下文，全局上下文被压入执行上下文栈")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ECStack = [\n    globalContext\n];\n")])])]),e("p",[t._v("2.全局上下文初始化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("globalContext = {\n    VO: [global],\n    Scope: [globalContext.VO],\n    this: globalContext.VO\n}\n")])])]),e("p",[t._v("2.初始化的同时，checkscope 函数被创建，保存作用域链到函数的内部属性[[scope]]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("checkscope.[[scope]] = [\n  globalContext.VO\n];\n")])])]),e("p",[t._v("3.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ECStack = [\n    checkscopeContext,\n    globalContext\n];\n")])])]),e("p",[t._v("4.checkscope 函数执行上下文初始化：")]),t._v(" "),e("ol",[e("li",[t._v("复制函数 [[scope]] 属性创建作用域链，")]),t._v(" "),e("li",[t._v("用 arguments 创建活动对象，")]),t._v(" "),e("li",[t._v("初始化活动对象，即加入形参、函数声明、变量声明，")]),t._v(" "),e("li",[t._v("将活动对象压入 checkscope 作用域链顶端。")])]),t._v(" "),e("p",[t._v("同时 f 函数被创建，保存作用域链到 f 函数的内部属性[[scope]]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("checkscopeContext = {\n    AO: {\n        arguments: {\n            length: 0\n        },\n        scope: undefined,\n        f: reference to function f(){}\n    },\n    Scope: [AO, globalContext.VO],\n    this: undefined\n}\n")])])]),e("p",[t._v("5.执行 f 函数，创建 f 函数执行上下文，f 函数执行上下文被压入执行上下文栈")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ECStack = [\n    fContext,\n    checkscopeContext,\n    globalContext\n];\n")])])]),e("p",[t._v("6.f 函数执行上下文初始化, 以下跟第 4 步相同：")]),t._v(" "),e("ol",[e("li",[t._v("复制函数 [[scope]] 属性创建作用域链")]),t._v(" "),e("li",[t._v("用 arguments 创建活动对象")]),t._v(" "),e("li",[t._v("初始化活动对象，即加入形参、函数声明、变量声明")]),t._v(" "),e("li",[t._v("将活动对象压入 f 作用域链顶端")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fContext = {\n    AO: {\n        arguments: {\n            length: 0\n        }\n    },\n    Scope: [AO, checkscopeContext.AO, globalContext.VO],\n    this: undefined\n}\n")])])]),e("p",[t._v("7.f 函数执行，沿着作用域链查找 scope 值，返回 scope 值")]),t._v(" "),e("p",[t._v("8.f 函数执行完毕，f 函数上下文从执行上下文栈中弹出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ECStack = [\n    checkscopeContext,\n    globalContext\n];\n")])])]),e("p",[t._v("9.checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ECStack = [\n    globalContext\n];\n")])])]),e("p",[t._v("第二段代码就留给大家去尝试模拟它的执行过程。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var scope = "global scope";\nfunction checkscope(){\n    var scope = "local scope";\n    function f(){\n        return scope;\n    }\n    return f;\n}\ncheckscope()();\n')])])]),e("p",[t._v("不过，在下一篇《JavaScript深入之闭包》中也会提及这段代码的执行过程。")])])}),[],!1,null,null,null);e.default=c.exports}}]);