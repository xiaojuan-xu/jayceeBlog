(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{420:function(t,e,n){t.exports=n.p+"assets/img/javascript8.b9d1c5b2.png"},421:function(t,e,n){t.exports=n.p+"assets/img/javascript9.4eaff8b7.png"},443:function(t,e,n){"use strict";n.r(e);var a=n(2),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"头疼的类型转换-上"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#头疼的类型转换-上"}},[t._v("#")]),t._v(" 头疼的类型转换(上)")]),t._v(" "),e("p",[e("strong",[t._v("原文链接："),e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mqyqingfeng/Blog"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("在 JavaScript 中，有一部分内容，情况复杂，容易出错，饱受争议但又应用广泛，这便是类型转换。")]),t._v(" "),e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" "),e("strong",[t._v("前言")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("将值从一种类型转换为另一种类型通常称为类型转换。")]),t._v(" "),e("p",[t._v("ES6 前，JavaScript 共有六种数据类型：Undefined、Null、Boolean、Number、String、Object。")]),t._v(" "),e("p",[t._v("我们先捋一捋基本类型之间的转换。")]),t._v(" "),e("h3",{attrs:{id:"原始值转布尔"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原始值转布尔"}},[t._v("#")]),t._v(" "),e("strong",[t._v("原始值转布尔")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("我们使用 Boolean 函数将类型转换成布尔类型，在 JavaScript 中，只有 6 种值可以被转换成 false，其他都会被转换成 true。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('console.log(Boolean()) // false\n\nconsole.log(Boolean(false)) // false\n\nconsole.log(Boolean(undefined)) // false\nconsole.log(Boolean(null)) // false\nconsole.log(Boolean(+0)) // false\nconsole.log(Boolean(-0)) // false\nconsole.log(Boolean(NaN)) // false\nconsole.log(Boolean("")) // false\n')])])]),e("p",[t._v("注意，当 Boolean 函数不传任何参数时，会返回 false。")]),t._v(" "),e("h3",{attrs:{id:"原始值转数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原始值转数字"}},[t._v("#")]),t._v(" "),e("strong",[t._v("原始值转数字")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("我们可以使用 Number 函数将类型转换成数字类型，如果参数无法被转换为数字，则返回 NaN。")]),t._v(" "),e("p",[t._v("在看例子之前，我们先看 ES5 规范 15.7.1.1 中关于 Number 的介绍：")]),t._v(" "),e("p",[e("img",{attrs:{src:n(420),alt:"javascript8"}})]),t._v(" "),e("p",[t._v("根据规范，如果 Number 函数不传参数，返回 +0，如果有参数，调用 ToNumber(value)。")]),t._v(" "),e("p",[t._v("注意这个 ToNumber 表示的是一个底层规范实现上的方法，并没有直接暴露出来。")]),t._v(" "),e("p",[t._v("而 ToNumber 则直接给了一个对应的结果表。表如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数类型")]),t._v(" "),e("th",[t._v("结果")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Undefined")]),t._v(" "),e("td",[t._v("NaN")])]),t._v(" "),e("tr",[e("td",[t._v("Null")]),t._v(" "),e("td",[t._v("+0")])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("如果参数是 true，返回 1。参数为 false，返回 +0")])]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("返回与之相等的值")])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v("这段比较复杂，看例子")])])])]),t._v(" "),e("p",[t._v("让我们写几个例子验证一下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('console.log(Number()) // +0\n\nconsole.log(Number(undefined)) // NaN\nconsole.log(Number(null)) // +0\n\nconsole.log(Number(false)) // +0\nconsole.log(Number(true)) // 1\n\nconsole.log(Number("123")) // 123\nconsole.log(Number("-123")) // -123\nconsole.log(Number("1.2")) // 1.2\nconsole.log(Number("000123")) // 123\nconsole.log(Number("-000123")) // -123\n\nconsole.log(Number("0x11")) // 17\n\nconsole.log(Number("")) // 0\nconsole.log(Number(" ")) // 0\n\nconsole.log(Number("123 123")) // NaN\nconsole.log(Number("foo")) // NaN\nconsole.log(Number("100a")) // NaN\n')])])]),e("p",[t._v("如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。")]),t._v(" "),e("p",[t._v('parseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 "0x" 或者"0X"，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('console.log(parseInt("3 abc")) // 3\nconsole.log(parseFloat("3.14 abc")) // 3.14\nconsole.log(parseInt("-12.34")) // -12\nconsole.log(parseInt("0xFF")) // 255\nconsole.log(parseFloat(".1")) // 0.1\nconsole.log(parseInt("0.1")) // 0\n')])])]),e("h3",{attrs:{id:"原始值转字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原始值转字符"}},[t._v("#")]),t._v(" "),e("strong",[t._v("原始值转字符")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("我们使用 String 函数将类型转换成字符串类型，依然先看 规范15.5.1.1中有关 String 函数的介绍：\n"),e("img",{attrs:{src:n(421),alt:"javascript9"}}),t._v("\n如果 String 函数不传参数，返回空字符串，如果有参数，调用 ToString(value)，而 ToString 也给了一个对应的结果表。表如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数类型")]),t._v(" "),e("th",[t._v("结果")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Undefined")]),t._v(" "),e("td",[t._v('"undefined"')])]),t._v(" "),e("tr",[e("td",[t._v("Null")]),t._v(" "),e("td",[t._v('"null"')])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v('如果参数是 true，返回 "true"。参数为 false，返回 "false"')])]),t._v(" "),e("tr",[e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("又是比较复杂，可以看例子")])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v("返回与之相等的值")])])])]),t._v(" "),e("p",[t._v("让我们写几个例子验证一下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("console.log(String()) // 空字符串\n\nconsole.log(String(undefined)) // undefined\nconsole.log(String(null)) // null\n\nconsole.log(String(false)) // false\nconsole.log(String(true)) // true\n\nconsole.log(String(0)) // 0\nconsole.log(String(-0)) // 0\nconsole.log(String(NaN)) // NaN\nconsole.log(String(Infinity)) // Infinity\nconsole.log(String(-Infinity)) // -Infinity\nconsole.log(String(1)) // 1\n")])])]),e("p",[t._v("注意这里的 ToString 和上一节的 ToNumber 都是底层规范实现的方法，并没有直接暴露出来。")]),t._v(" "),e("h3",{attrs:{id:"原始值转对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原始值转对象"}},[t._v("#")]),t._v(" "),e("strong",[t._v("原始值转对象")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。")]),t._v(" "),e("p",[t._v("null 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var a = 1;\nconsole.log(typeof a); // number\nvar b = new Number(a);\nconsole.log(typeof b); // object\n")])])]),e("h3",{attrs:{id:"对象转布尔值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转布尔值"}},[t._v("#")]),t._v(" "),e("strong",[t._v("对象转布尔值")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("对象到布尔值的转换非常简单：所有对象(包括数组和函数)都转换为 true。对于包装对象也是这样，举个例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("console.log(Boolean(new Boolean(false))) // true\n")])])]),e("h3",{attrs:{id:"对象转字符串和数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转字符串和数字"}},[t._v("#")]),t._v(" "),e("strong",[t._v("对象转字符串和数字")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf。注意这个跟上面所说的 ToString 和 ToNumber 是不同的，这两个方法是真实暴露出来的方法。")]),t._v(" "),e("p",[t._v("所有的对象除了 null 和 undefined 之外的任何值都具有 toString 方法，通常情况下，它和使用 String 方法返回的结果一致。toString 方法的作用在于返回一个反映这个对象的字符串，然而这才是情况复杂的开始。")]),t._v(" "),e("p",[t._v('在《JavaScript专题之类型判断(上)》中讲到过 Object.prototype.toString 方法会根据这个对象的[[class]]内部属性，返回由 "[object " 和 class 和 "]" 三个部分组成的字符串。举个例子：')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Object.prototype.toString.call({a: 1}) // "[object Object]"\n({a: 1}).toString() // "[object Object]"\n({a: 1}).toString === Object.prototype.toString // true\n')])])]),e("p",[t._v("我们可以看出当调用对象的 toString 方法时，其实调用的是 Object.prototype 上的 toString 方法。")]),t._v(" "),e("p",[t._v("然而 JavaScript 下的很多类根据各自的特点，定义了更多版本的 toString 方法。例如:")]),t._v(" "),e("ol",[e("li",[t._v("数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。")]),t._v(" "),e("li",[t._v("函数的 toString 方法返回源代码字符串。")]),t._v(" "),e("li",[t._v("日期的 toString 方法返回一个可读的日期和时间字符串。")]),t._v(" "),e("li",[t._v("RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。")])]),t._v(" "),e("p",[t._v("读文字太抽象？我们直接写例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('console.log(({}).toString()) // [object Object]\n\nconsole.log([].toString()) // ""\nconsole.log([0].toString()) // 0\nconsole.log([1, 2, 3].toString()) // 1,2,3\nconsole.log((function(){var a = 1;}).toString()) // function (){var a = 1;}\nconsole.log((/\\d+/g).toString()) // /\\d+/g\nconsole.log((new Date(2010, 0, 1)).toString()) // Fri Jan 01 2010 00:00:00 GMT+0800 (CST)\n')])])]),e("p",[t._v("而另一个转换对象的函数是 valueOf，表示对象的原始值。默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var date = new Date(2017, 4, 21);\nconsole.log(date.valueOf()) // 1495296000000\n")])])]),e("h3",{attrs:{id:"对象接着转字符串和数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象接着转字符串和数字"}},[t._v("#")]),t._v(" "),e("strong",[t._v("对象接着转字符串和数字")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("了解了 toString 方法和 valueOf 方法，我们分析下从对象到字符串是如何转换的。看规范 ES5 9.8，其实就是 ToString 方法的对应表，只是这次我们加上 Object 的转换规则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数类型")]),t._v(" "),e("th",[t._v("结果")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("1. primValue = ToPrimitive(input, String) "),e("br"),t._v(" 2. 返回ToString(primValue).")])])])]),t._v(" "),e("p",[t._v("所谓的 ToPrimitive 方法，其实就是输入一个值，然后返回一个一定是基本类型的值。")]),t._v(" "),e("p",[t._v("我们总结一下，当我们用 String 方法转化一个值的时候，如果是基本类型，就参照 “原始值转字符” 这一节的对应表，如果不是基本类型，我们会将调用一个 ToPrimitive 方法，将其转为基本类型，然后再参照“原始值转字符” 这一节的对应表进行转换。")]),t._v(" "),e("p",[t._v("其实，从对象到数字的转换也是一样：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数类型")]),t._v(" "),e("th",[t._v("结果")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Object")]),t._v(" "),e("td",[t._v("1. primValue = ToPrimitive(input, Number) "),e("br"),t._v(" 2. 返回ToNumber(primValue)。")])])])]),t._v(" "),e("p",[t._v("虽然转换成基本值都会使用 ToPrimitive 方法，但传参有不同，最后的处理也有不同，转字符串调用的是 ToString，转数字调用 ToNumber。")]),t._v(" "),e("h3",{attrs:{id:"toprimitive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive"}},[t._v("#")]),t._v(" "),e("strong",[t._v("ToPrimitive")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("那接下来就要看看 ToPrimitive 了，在了解了 toString 和 valueOf 方法后，这个也很简单。")]),t._v(" "),e("p",[t._v("让我们看规范 9.1，函数语法表示如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ToPrimitive(input[, PreferredType])\n")])])]),e("p",[t._v("第一个参数是 input，表示要处理的输入值。")]),t._v(" "),e("p",[t._v("第二个参数是 PreferredType，非必填，表示希望转换成的类型，有两个值可以选，Number 或者 String。")]),t._v(" "),e("p",[t._v("当不传入 PreferredType 时，如果 input 是日期类型，相当于传入 String，否则，都相当于传入 Number。")]),t._v(" "),e("p",[t._v("如果传入的 input 是 Undefined、Null、Boolean、Number、String 类型，直接返回该值。")]),t._v(" "),e("p",[t._v("如果是 ToPrimitive(obj, Number)，处理步骤如下：")]),t._v(" "),e("ol",[e("li",[t._v("如果 obj 为 基本类型，直接返回")]),t._v(" "),e("li",[t._v("否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。")]),t._v(" "),e("li",[t._v("否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。")]),t._v(" "),e("li",[t._v("否则，JavaScript 抛出一个类型错误异常。")])]),t._v(" "),e("p",[t._v("如果是 ToPrimitive(obj, String)，处理步骤如下：")]),t._v(" "),e("ol",[e("li",[t._v("如果 obj为 基本类型，直接返回")]),t._v(" "),e("li",[t._v("否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。")]),t._v(" "),e("li",[t._v("否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。")]),t._v(" "),e("li",[t._v("否则，JavaScript 抛出一个类型错误异常。")])]),t._v(" "),e("h3",{attrs:{id:"对象转字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转字符串"}},[t._v("#")]),t._v(" "),e("strong",[t._v("对象转字符串")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("所以总结下，对象转字符串(就是 Number() 函数)可以概括为：")]),t._v(" "),e("ol",[e("li",[t._v("如果对象具有 toString 方法，则调用这个方法。如果他返回一个原始值，JavaScript 将这个值转换为字符串，并返回这个字符串结果。")]),t._v(" "),e("li",[t._v("如果对象没有 toString 方法，或者这个方法并不返回一个原始值，那么 JavaScript 会调用 valueOf 方法。如果存在这个方法，则 JavaScript 调用它。如果返回值是原始值，JavaScript 将这个值转换为字符串，并返回这个字符串的结果。")]),t._v(" "),e("li",[t._v("否则，JavaScript 无法从 toString 或者 valueOf 获得一个原始值，这时它将抛出一个类型错误异常。")])]),t._v(" "),e("h3",{attrs:{id:"对象转数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转数字"}},[t._v("#")]),t._v(" "),e("strong",[t._v("对象转数字")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("对象转数字的过程中，JavaScript 做了同样的事情，只是它会首先尝试 valueOf 方法")]),t._v(" "),e("ol",[e("li",[t._v("如果对象具有 valueOf 方法，且返回一个原始值，则 JavaScript 将这个原始值转换为数字并返回这个数字")]),t._v(" "),e("li",[t._v("否则，如果对象具有 toString 方法，且返回一个原始值，则 JavaScript 将其转换并返回。")]),t._v(" "),e("li",[t._v("否则，JavaScript 抛出一个类型错误异常。")])]),t._v(" "),e("p",[t._v("举个例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("console.log(Number({})) // NaN\nconsole.log(Number({a : 1})) // NaN\n\nconsole.log(Number([])) // 0\nconsole.log(Number([0])) // 0\nconsole.log(Number([1, 2, 3])) // NaN\nconsole.log(Number(function(){var a = 1;})) // NaN\nconsole.log(Number(/\\d+/g)) // NaN\nconsole.log(Number(new Date(2010, 0, 1))) // 1262275200000\nconsole.log(Number(new Error('a'))) // NaN\n")])])]),e("p",[t._v("注意，在这个例子中，[] 和 [0] 都返回了 0，而 [1, 2, 3] 却返回了一个 NaN。我们分析一下原因：")]),t._v(" "),e("p",[t._v("当我们 Number([]) 的时候，先调用 [] 的 valueOf 方法，此时返回 []，因为返回了一个对象而不是原始值，所以又调用了 toString 方法，此时返回一个空字符串，接下来调用 ToNumber 这个规范上的方法，参照对应表，转换为 0, 所以最后的结果为 0。")]),t._v(" "),e("p",[t._v("而当我们 Number([1, 2, 3]) 的时候，先调用 [1, 2, 3] 的 valueOf 方法，此时返回 [1, 2, 3]，再调用 toString 方法，此时返回 1,2,3，接下来调用 ToNumber，参照对应表，因为无法转换为数字，所以最后的结果为 NaN。")]),t._v(" "),e("h3",{attrs:{id:"json-stringify"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify"}},[t._v("#")]),t._v(" "),e("strong",[t._v("JSON.stringify")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("值得一提的是：JSON.stringify() 方法可以将一个 JavaScript 值转换为一个 JSON 字符串，实现上也是调用了 toString 方法，也算是一种类型转换的方法。下面讲一讲JSON.stringify 的注意要点：")]),t._v(" "),e("p",[t._v("1.处理基本类型时，与使用toString基本相同，结果都是字符串，除了 undefined")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('console.log(JSON.stringify(null)) // null\nconsole.log(JSON.stringify(undefined)) // undefined，注意这个undefined不是字符串的undefined\nconsole.log(JSON.stringify(true)) // true\nconsole.log(JSON.stringify(42)) // 42\nconsole.log(JSON.stringify("42")) // "42"\n')])])]),e("p",[t._v("2.布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('JSON.stringify([new Number(1), new String("false"), new Boolean(false)]); // "[1,"false",false]"\n')])])]),e("p",[t._v("3.undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('JSON.stringify({x: undefined, y: Object, z: Symbol("")}); \n// "{}"\n\nJSON.stringify([undefined, Object, Symbol("")]);          \n// "[null,null,null]" \n')])])]),e("p",[t._v("4.JSON.stringify 有第二个参数 replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性应该被处理，哪些应该被排除。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function replacer(key, value) {\n  if (typeof value === "string") {\n    return undefined;\n  }\n  return value;\n}\n\nvar foo = {foundation: "Mozilla", model: "box", week: 45, transport: "car", month: 7};\nvar jsonString = JSON.stringify(foo, replacer);\n\nconsole.log(jsonString)\n// {"week":45,"month":7}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var foo = {foundation: "Mozilla", model: "box", week: 45, transport: "car", month: 7};\nconsole.log(JSON.stringify(foo, [\'week\', \'month\']));\n// {"week":45,"month":7}\n')])])]),e("p",[t._v("5.如果一个被序列化的对象拥有 toJSON 方法，那么该 toJSON 方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用 toJSON 方法后的返回值会被序列化，例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var obj = {\n  foo: 'foo',\n  toJSON: function () {\n    return 'bar';\n  }\n};\nJSON.stringify(obj);      // '\"bar\"'\nJSON.stringify({x: obj}); // '{\"x\":\"bar\"}'\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);