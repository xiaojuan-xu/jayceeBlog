(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{441:function(a,t,e){"use strict";e.r(t);var n=e(2),s=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"变量对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[a._v("#")]),a._v(" 变量对象")]),a._v(" "),t("p",[t("strong",[a._v("原文链接："),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/mqyqingfeng/Blog"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" "),t("strong",[a._v("前言")])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("在上篇"),t("RouterLink",{attrs:{to:"/JavaScript/javascript3.html"}},[a._v("《JavaScript深入之执行上下文栈》")]),a._v("中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。")],1),a._v(" "),t("p",[a._v("对于每个执行上下文，都有三个重要属性：")]),a._v(" "),t("ul",[t("li",[a._v("变量对象(Variable object，VO)")]),a._v(" "),t("li",[a._v("作用域链(Scope chain)")]),a._v(" "),t("li",[a._v("this")])]),a._v(" "),t("p",[a._v("今天重点讲讲创建变量对象的过程。")]),a._v(" "),t("h3",{attrs:{id:"变量对象-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量对象-2"}},[a._v("#")]),a._v(" "),t("strong",[a._v("变量对象")])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。")]),a._v(" "),t("p",[a._v("因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。")]),a._v(" "),t("h3",{attrs:{id:"全局上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局上下文"}},[a._v("#")]),a._v(" "),t("strong",[a._v("全局上下文")])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("我们先了解一个概念，叫全局对象。在 "),t("a",{attrs:{href:"http://www.w3school.com.cn/jsref/jsref_obj_global.asp",target:"_blank",rel:"noopener noreferrer"}},[a._v("W3School"),t("OutboundLink")],1),a._v(" 中也有介绍：")]),a._v(" "),t("blockquote",[t("p",[a._v("全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。\n在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。\n例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。")])]),a._v(" "),t("p",[a._v("如果看的不是很懂的话，容我再来介绍下全局对象:")]),a._v(" "),t("p",[a._v("1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(this);\n")])])]),t("p",[a._v("2.全局对象是由 Object 构造函数实例化的一个对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(this instanceof Object);\n")])])]),t("p",[a._v("3.预定义了一堆，嗯，一大堆函数和属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 都能生效\nconsole.log(Math.random());\nconsole.log(this.Math.random());\n")])])]),t("p",[a._v("4.作为全局变量的宿主。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = 1;\nconsole.log(this.a);\n")])])]),t("p",[a._v("5.客户端 JavaScript 中，全局对象有 window 属性指向自身。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = 1;\nconsole.log(window.a);\n\nthis.window.b = 2;\nconsole.log(this.b);\n")])])]),t("p",[a._v("花了一个大篇幅介绍全局对象，其实就想说：")]),a._v(" "),t("p",[a._v("全局上下文中的变量对象就是全局对象呐！")]),a._v(" "),t("h3",{attrs:{id:"函数上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数上下文"}},[a._v("#")]),a._v(" "),t("strong",[a._v("函数上下文")])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。")]),a._v(" "),t("p",[a._v("活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。")]),a._v(" "),t("p",[a._v("活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。")]),a._v(" "),t("h3",{attrs:{id:"执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行过程"}},[a._v("#")]),a._v(" "),t("strong",[a._v("执行过程")])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：")]),a._v(" "),t("ol",[t("li",[a._v("进入执行上下文")]),a._v(" "),t("li",[a._v("代码执行")])]),a._v(" "),t("h3",{attrs:{id:"进入执行上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入执行上下文"}},[a._v("#")]),a._v(" "),t("strong",[a._v("进入执行上下文")])]),a._v(" "),t("p",[a._v("当进入执行上下文时，这时候还没有执行代码，")]),a._v(" "),t("p",[a._v("变量对象会包括：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("函数的所有形参 (如果是函数上下文)")]),a._v(" "),t("ul",[t("li",[a._v("由名称和对应值组成的一个变量对象的属性被创建")]),a._v(" "),t("li",[a._v("没有实参，属性值设为 undefined")])])]),a._v(" "),t("li",[t("p",[a._v("函数声明")]),a._v(" "),t("ul",[t("li",[a._v("由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建")]),a._v(" "),t("li",[a._v("如果变量对象已经存在相同名称的属性，则完全替换这个属性")])])]),a._v(" "),t("li",[t("p",[a._v("变量声明")]),a._v(" "),t("ul",[t("li",[a._v("由名称和对应值（undefined）组成一个变量对象的属性被创建；")]),a._v(" "),t("li",[a._v("如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性")])])])]),a._v(" "),t("p",[a._v("举个例子：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function foo(a) {\n  var b = 2;\n  function c() {}\n  var d = function() {};\n\n  b = 3;\n\n}\n\nfoo(1);\n")])])]),t("p",[a._v("在进入执行上下文后，这时候的 AO 是：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("AO = {\n    arguments: {\n        0: 1,\n        length: 1\n    },\n    a: 1,\n    b: undefined,\n    c: reference to function c(){},\n    d: undefined\n}\n")])])]),t("h3",{attrs:{id:"代码执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码执行"}},[a._v("#")]),a._v(" "),t("strong",[a._v("代码执行")])]),a._v(" "),t("p",[a._v("在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值")]),a._v(" "),t("p",[a._v("还是上面的例子，当代码执行完后，这时候的 AO 是：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('AO = {\n    arguments: {\n        0: 1,\n        length: 1\n    },\n    a: 1,\n    b: 3,\n    c: reference to function c(){},\n    d: reference to FunctionExpression "d"\n}\n')])])]),t("p",[a._v("到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("全局上下文的变量对象初始化是全局对象")])]),a._v(" "),t("li",[t("p",[a._v("函数上下文的变量对象初始化只包括 Arguments 对象")])]),a._v(" "),t("li",[t("p",[a._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")])]),a._v(" "),t("li",[t("p",[a._v("在代码执行阶段，会再次修改变量对象的属性值")])])]),a._v(" "),t("h3",{attrs:{id:"思考题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考题"}},[a._v("#")]),a._v(" "),t("strong",[a._v("思考题")])]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("最后让我们看几个例子：")]),a._v(" "),t("p",[a._v("1.第一题")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function foo() {\n    console.log(a);\n    a = 1;\n}\n\nfoo(); // ???\n\nfunction bar() {\n    a = 1;\n    console.log(a);\n}\nbar(); // ???\n")])])]),t("p",[a._v("第一段会报错：Uncaught ReferenceError: a is not defined。")]),a._v(" "),t("p",[a._v("第二段会打印：1。")]),a._v(" "),t("p",[a._v('这是因为函数中的 "a" 并没有通过 var 关键字声明，所有不会被存放在 AO 中。')]),a._v(" "),t("p",[a._v("第一段执行 console 的时候， AO 的值是：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("AO = {\n    arguments: {\n        length: 0\n    }\n}\n")])])]),t("p",[a._v("没有 a 的值，然后就会到全局去找，全局也没有，所以会报错。")]),a._v(" "),t("p",[a._v("当第二段执行 console 的时候，全局对象已经被赋予了 a 属性，这时候就可以从全局找到 a 的值，所以会打印 1。")]),a._v(" "),t("p",[a._v("2.第二题")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('console.log(foo);\n\nfunction foo(){\n    console.log("foo");\n}\n\nvar foo = 1;\n')])])]),t("p",[a._v("会打印函数，而不是 undefined 。")]),a._v(" "),t("p",[a._v("这是因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。")]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"网友解答的比较好的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网友解答的比较好的"}},[a._v("#")]),a._v(" 网友解答的比较好的：")]),a._v(" "),t("p",[a._v("思考题第二题:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('console.log(foo);\nfunction foo(){\n    console.log("foo");\n}\nvar foo = 1;\n')])])]),t("p",[a._v("解:\nJavaScript发现了一段可执行代码(executable code),准备创建对应的执行上下文(execution context):")]),a._v(" "),t("blockquote",[t("p",[a._v("在此之前")])]),a._v(" "),t("p",[a._v("因为JavaScript的函数提升特性,将代码等量变换为:(1)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function foo(){// 函数提升\n    console.log("foo");\n}\nconsole.log(foo);\nvar foo = 1;\n')])])]),t("p",[a._v("又因为JavaScript的变量提升特性,将代码等量变换为:(2)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function foo(){// 函数提升\n    console.log("foo");\n}\nvar foo;// 变量提升\nconsole.log(foo);\nfoo = 1;\n')])])]),t("p",[a._v("开始创建对应的执行上下文(execution context):(3)")]),a._v(" "),t("ul",[t("li",[a._v("变量对象(Variable object，VO)")]),a._v(" "),t("li",[a._v("作用域链(Scope chain)")]),a._v(" "),t("li",[a._v("this")])]),a._v(" "),t("blockquote",[t("p",[a._v("其中,此处探讨的VO只是被初始化(4)")])]),a._v(" "),t("p",[a._v("当javaScript扫描到console.log(foo)时,执行代码之前,先进入执行上下文(execution context),(5)")]),a._v(" "),t("blockquote",[t("p",[a._v("因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("VO = {\n    foo: reference to function foo(){},\n    ~foo:undefined// 此处疑问: 此处变量声明的foo是否保存在VO中;以何种形式保存\n}\n")])])]),t("p",[a._v("执行代码console.log(foo),查找到了VO中的foo,输出结果.(6)\n接着执行foo = 1,执行之后,VO为:(7)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("VO = {\n    foo: 1\n}\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);