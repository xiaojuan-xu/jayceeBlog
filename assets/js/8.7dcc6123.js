(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{411:function(t,r,e){t.exports=e.p+"assets/img/javascript1.6ed311e0.png"},412:function(t,r,e){t.exports=e.p+"assets/img/javascript2.88e97b5c.png"},413:function(t,r,e){t.exports=e.p+"assets/img/javascript3.5fa1915a.png"},414:function(t,r,e){t.exports=e.p+"assets/img/javascript4.33e81924.png"},415:function(t,r,e){t.exports=e.p+"assets/img/javascript5.0eda1a47.png"},430:function(t,r,e){"use strict";e.r(r);var o=e(2),n=Object(o.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"从原型到原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从原型到原型链"}},[t._v("#")]),t._v(" 从原型到原型链")]),t._v(" "),r("p",[r("strong",[t._v("原文链接："),r("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mqyqingfeng/Blog"),r("OutboundLink")],1)])]),t._v(" "),r("h1",{attrs:{id:"构造函数创建对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构造函数创建对象"}},[t._v("#")]),t._v(" 构造函数创建对象")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("我们先使用构造函数创建一个对象：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {}\nvar person = new Person();\nperson.name = 'Kevin';\nconsole.log(person.name) // Kevin\n")])])]),r("p",[t._v("在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。\n很简单吧，接下来进入正题：")]),t._v(" "),r("h3",{attrs:{id:"prototype"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" "),r("strong",[t._v("prototype")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {}\n// 虽然写在注释里，但是你要注意：\n// prototype是函数才会有的属性\nPerson.prototype.name = 'Kevin';\nvar person1 = new Person();\nvar person2 = new Person();\nconsole.log(person1.name) // Kevin\nconsole.log(person2.name) // Kevin\n")])])]),r("p",[t._v("那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？")]),t._v(" "),r("p",[t._v("其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。")]),t._v(" "),r("p",[t._v("那什么是 "),r("strong",[t._v("原型")]),t._v(" 呢？你可以这样理解："),r("strong",[t._v('每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型"继承"属性。')])]),t._v(" "),r("p",[t._v("让我们用一张图表示构造函数和实例原型之间的关系：\n"),r("img",{attrs:{src:e(411),alt:"javascript1"}})]),t._v(" "),r("p",[t._v("在这张图中我们用 Object.prototype 表示实例原型。")]),t._v(" "),r("p",[t._v("那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：")]),t._v(" "),r("h3",{attrs:{id:"proto"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),r("strong",[t._v("__proto__")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。")]),t._v(" "),r("p",[t._v("为了证明这一点,我们可以在火狐或者谷歌中输入：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {}\nvar person = new Person();\nconsole.log(person.__proto__ === Person.prototype); // true\n")])])]),r("p",[t._v("于是我们更新下关系图：")]),t._v(" "),r("p",[r("img",{attrs:{src:e(412),alt:"javascript2"}})]),t._v(" "),r("p",[t._v("既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？")]),t._v(" "),r("h3",{attrs:{id:"constructor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" "),r("strong",[t._v("constructor")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。")]),t._v(" "),r("p",[t._v("为了验证这一点，我们可以尝试：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {}\nconsole.log(Person === Person.prototype.constructor); // true\n")])])]),r("p",[t._v("所以再更新下关系图：")]),t._v(" "),r("p",[r("img",{attrs:{src:e(413),alt:"javascript3"}})]),t._v(" "),r("p",[t._v("综上我们已经得出：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {}\nvar person = new Person();\nconsole.log(person.__proto__ == Person.prototype) // true\nconsole.log(Person.prototype.constructor == Person) // true\n// 顺便学习一个ES5的方法,可以获得对象的原型\nconsole.log(Object.getPrototypeOf(person) === Person.prototype) // true\n")])])]),r("p",[t._v("了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：")]),t._v(" "),r("h3",{attrs:{id:"实例与原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实例与原型"}},[t._v("#")]),t._v(" "),r("strong",[t._v("实例与原型")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。")]),t._v(" "),r("p",[t._v("举个例子：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {\n\n}\n\nPerson.prototype.name = 'Kevin';\n\nvar person = new Person();\n\nperson.name = 'Daisy';\nconsole.log(person.name) // Daisy\n\ndelete person.name;\nconsole.log(person.name) // Kevin\n")])])]),r("p",[t._v("在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。")]),t._v(" "),r("p",[t._v("但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.__proto__ ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。")]),t._v(" "),r("p",[t._v("但是万一还没有找到呢？原型的原型又是什么呢？")]),t._v(" "),r("h3",{attrs:{id:"原型的原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型的原型"}},[t._v("#")]),t._v(" "),r("strong",[t._v("原型的原型")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n")])])]),r("p",[t._v("其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 "),r("strong",[t._v("proto")]),t._v(" 指向构造函数的 prototype ，所以我们再更新下关系图：")]),t._v(" "),r("p",[r("img",{attrs:{src:e(414),alt:"javascript4"}})]),t._v(" "),r("h3",{attrs:{id:"原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" "),r("strong",[t._v("原型链")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("那 Object.prototype 的原型呢？")]),t._v(" "),r("p",[t._v("null，我们可以打印：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("console.log(Object.prototype.__proto__ === null) // true\n")])])]),r("p",[t._v("然而 null 究竟代表了什么呢？")]),t._v(" "),r("p",[t._v("引用阮一峰老师的 "),r("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《undefined与null的区别》"),r("OutboundLink")],1),t._v(" 就是：")]),t._v(" "),r("blockquote",[r("p",[t._v("null 表示“没有对象”，即该处不应该有值。")])]),t._v(" "),r("p",[t._v("所以 Object.prototype.__proto__ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。")]),t._v(" "),r("p",[t._v("所以查找属性的时候查到 Object.prototype 就可以停止查找了。")]),t._v(" "),r("p",[t._v("最后一张关系图也可以更新为：")]),t._v(" "),r("p",[r("img",{attrs:{src:e(415),alt:"javascript5"}})]),t._v(" "),r("p",[t._v("顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。")]),t._v(" "),r("h3",{attrs:{id:"补充"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" "),r("strong",[t._v("补充")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("最后，补充三点大家可能不会注意的地方：")]),t._v(" "),r("p",[r("strong",[t._v("constructor")])]),t._v(" "),r("p",[t._v("首先是 constructor 属性，我们看个例子：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Person() {\n\n}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n")])])]),r("p",[t._v("当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("person.constructor === Person.prototype.constructor\n")])])]),r("p",[r("strong",[t._v("__proto__")])]),t._v(" "),r("p",[t._v("其次是 __proto__ ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj."),r("strong",[t._v("proto")]),t._v(" 时，可以理解成返回了 Object.getPrototypeOf(obj)。")]),t._v(" "),r("p",[r("strong",[t._v("真的是继承吗？")])]),t._v(" "),r("p",[t._v("最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：")]),t._v(" "),r("p",[t._v("继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。")])])}),[],!1,null,null,null);r.default=n.exports}}]);