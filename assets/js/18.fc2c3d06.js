(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{433:function(n,t,e){"use strict";e.r(t);var a=e(2),o=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"new的模拟实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new的模拟实现"}},[n._v("#")]),n._v(" new的模拟实现")]),n._v(" "),t("p",[t("strong",[n._v("原文链接："),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/mqyqingfeng/Blog"),t("OutboundLink")],1)])]),n._v(" "),t("h3",{attrs:{id:"new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[n._v("#")]),n._v(" "),t("strong",[n._v("new")])]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("一句话介绍 new:")]),n._v(" "),t("blockquote",[t("p",[n._v("new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一")])]),n._v(" "),t("p",[n._v("也许有点难懂，我们在模拟 new 之前，先看看 new 实现了哪些功能。")]),n._v(" "),t("p",[n._v("举个例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// Otaku 御宅族，简称宅\nfunction Otaku (name, age) {\n    this.name = name;\n    this.age = age;\n\n    this.habit = 'Games';\n}\n\n// 因为缺乏锻炼的缘故，身体强度让人担忧\nOtaku.prototype.strength = 60;\n\nOtaku.prototype.sayYourName = function () {\n    console.log('I am ' + this.name);\n}\n\nvar person = new Otaku('Kevin', '18');\n\nconsole.log(person.name) // Kevin\nconsole.log(person.habit) // Games\nconsole.log(person.strength) // 60\n\nperson.sayYourName(); // I am Kevin\n")])])]),t("p",[n._v("从这个例子中，我们可以看到，实例 person 可以：")]),n._v(" "),t("ol",[t("li",[n._v("访问到 Otaku 构造函数里的属性")]),n._v(" "),t("li",[n._v("访问到 Otaku.prototype 中的属性\n接下来，我们可以尝试着模拟一下了。")])]),n._v(" "),t("p",[n._v("因为 new 是关键字，所以无法像 bind 函数一样直接覆盖，所以我们写一个函数，命名为 objectFactory，来模拟 new 的效果。用的时候是这样的：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Otaku () {\n    ……\n}\n\n// 使用 new\nvar person = new Otaku(……);\n// 使用 objectFactory\nvar person = objectFactory(Otaku, ……)\n")])])]),t("h3",{attrs:{id:"初步实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初步实现"}},[n._v("#")]),n._v(" "),t("strong",[n._v("初步实现")])]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("分析：")]),n._v(" "),t("p",[n._v("因为 new 的结果是一个新对象，所以在模拟实现的时候，我们也要建立一个新对象，假设这个对象叫 obj，因为 obj 会具有 Otaku 构造函数里的属性，想想经典继承的例子，我们可以使用 Otaku.apply(obj, arguments)来给 obj 添加新的属性。")]),n._v(" "),t("p",[n._v("在 JavaScript 深入系列第一篇中，我们便讲了原型与原型链，我们知道实例的 __proto__ 属性会指向构造函数的 prototype，也正是因为建立起这样的关系，实例可以访问原型上的属性。")]),n._v(" "),t("p",[n._v("现在，我们可以尝试着写第一版了：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 第一版代码\nfunction objectFactory() {\n\n    var obj = new Object(),\n\n    Constructor = [].shift.call(arguments);\n\n    obj.__proto__ = Constructor.prototype;\n\n    Constructor.apply(obj, arguments);\n\n    return obj;\n\n};\n")])])]),t("p",[n._v("在这一版中，我们：")]),n._v(" "),t("ol",[t("li",[n._v("用new Object() 的方式新建了一个对象 obj")]),n._v(" "),t("li",[n._v("取出第一个参数，就是我们要传入的构造函数。此外因为 shift 会修改原数组，所以 arguments 会被去除第一个参数")]),n._v(" "),t("li",[n._v("将 obj 的原型指向构造函数，这样 obj 就可以访问到构造函数原型中的属性")]),n._v(" "),t("li",[n._v("使用 apply，改变构造函数 this 的指向到新建的对象，这样 obj 就可以访问到构造函数中的属性")]),n._v(" "),t("li",[n._v("返回 obj\n更多关于：")])]),n._v(" "),t("p",[n._v("原型与原型链，可以看"),t("RouterLink",{attrs:{to:"/JavaScript/javascript1.html"}},[n._v("《JavaScript深入之从原型到原型链》")])],1),n._v(" "),t("p",[n._v("apply，可以看"),t("RouterLink",{attrs:{to:"/JavaScript/javascript10.html"}},[n._v("《JavaScript深入之call和apply的模拟实现》")])],1),n._v(" "),t("p",[n._v("经典继承，可以看"),t("RouterLink",{attrs:{to:"/JavaScript/javascript15.html"}},[n._v("《JavaScript深入之继承》")])],1),n._v(" "),t("p",[n._v("复制以下的代码，到浏览器中，我们可以做一下测试：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Otaku (name, age) {\n    this.name = name;\n    this.age = age;\n\n    this.habit = 'Games';\n}\n\nOtaku.prototype.strength = 60;\n\nOtaku.prototype.sayYourName = function () {\n    console.log('I am ' + this.name);\n}\n\nfunction objectFactory() {\n    var obj = new Object(),\n    Constructor = [].shift.call(arguments);\n    obj.__proto__ = Constructor.prototype;\n    Constructor.apply(obj, arguments);\n    return obj;\n};\n\nvar person = objectFactory(Otaku, 'Kevin', '18')\n\nconsole.log(person.name) // Kevin\nconsole.log(person.habit) // Games\nconsole.log(person.strength) // 60\n\nperson.sayYourName(); // I am Kevin\n")])])]),t("p",[n._v("[]~(￣▽￣)~**")]),n._v(" "),t("h3",{attrs:{id:"返回值效果实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#返回值效果实现"}},[n._v("#")]),n._v(" "),t("strong",[n._v("返回值效果实现")])]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("接下来我们再来看一种情况，假如构造函数有返回值，举个例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Otaku (name, age) {\n    this.strength = 60;\n    this.age = age;\n\n    return {\n        name: name,\n        habit: 'Games'\n    }\n}\n\nvar person = new Otaku('Kevin', '18');\n\nconsole.log(person.name) // Kevin\nconsole.log(person.habit) // Games\nconsole.log(person.strength) // undefined\nconsole.log(person.age) // undefined\n")])])]),t("p",[n._v("在这个例子中，构造函数返回了一个对象，在实例 person 中只能访问返回的对象中的属性。")]),n._v(" "),t("p",[n._v("而且还要注意一点，在这里我们是返回了一个对象，假如我们只是返回一个基本类型的值呢？")]),n._v(" "),t("p",[n._v("再举个例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Otaku (name, age) {\n    this.strength = 60;\n    this.age = age;\n\n    return 'handsome boy';\n}\n\nvar person = new Otaku('Kevin', '18');\n\nconsole.log(person.name) // undefined\nconsole.log(person.habit) // undefined\nconsole.log(person.strength) // 60\nconsole.log(person.age) // 18\n")])])]),t("p",[n._v("结果完全颠倒过来，这次尽管有返回值，但是相当于没有返回值进行处理。")]),n._v(" "),t("p",[n._v("所以我们还需要判断返回的值是不是一个对象，如果是一个对象，我们就返回这个对象，如果没有，我们该返回什么就返回什么。")]),n._v(" "),t("p",[n._v("再来看第二版的代码，也是最后一版的代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 第二版的代码\nfunction objectFactory() {\n\n    var obj = new Object(),\n\n    Constructor = [].shift.call(arguments);\n\n    obj.__proto__ = Constructor.prototype;\n\n    var ret = Constructor.apply(obj, arguments);\n\n    return typeof ret === 'object' ? ret : obj;\n\n};\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);